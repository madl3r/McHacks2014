package threadChords;

import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.SourceDataLine;

import java.util.Random;

public class Tone implements Runnable{

	
	 public static float SAMPLE_RATE = 8000f;
	 public int hertz;
	 public int chanel;
	 public int maxMili;
	 public int numOfNotes;

	 public Tone (int hrtz)
	 {
		 hertz = hrtz;
		 chanel = 1;
		 maxMili = 4000; 
		 numOfNotes = 100;
	 }
	 
	 public Tone (int hrtz, int pChanel)
	 {
		 hertz = hrtz;
		 chanel = pChanel;
	 }
	 
	  public void tone(int hz, int msecs) 
	     throws LineUnavailableException 
	  {
	     tone(hz, msecs, 1.0);
	  }

	  public void tone(int hz, int msecs, double vol)
	      throws LineUnavailableException 
	  {
	    byte[] buf = new byte[1];
	    AudioFormat af = 
	        new AudioFormat(
	            SAMPLE_RATE, // sampleRate
	            8,           // sampleSizeInBits
	            chanel,           // channels
	            true,        // signed
	            false);      // bigEndian
	    SourceDataLine sdl = AudioSystem.getSourceDataLine(af);
	    sdl.open(af);
	    sdl.start();
	    for (int i=0; i < msecs*8; i++) {
	      double angle = i / (SAMPLE_RATE / hz) * 2.0 * Math.PI;
	      double angle2 = i / (SAMPLE_RATE /220.0) * 2.0 * Math.PI;
	      buf[0] = (byte)(Math.sin(angle) * 127.0 * vol);// + Math.sin(angle2) * 127.0 * vol);
	      sdl.write(buf,0,1);
	    }
	    sdl.drain();
	    sdl.stop();
	    sdl.close();
	  }

	@Override
	public void run() {
		Random randHz = new Random();
		
		for (int i = 0; i < numOfNotes; i++)
		// TODO Auto-generated method stub
		
		try{
			tone(hertz,5000);
		}
		catch(Exception e)
		{}
	}
	
}
